#pragma kernel CSMain

#include "InputStructs.hlsl"
#include "InputProperties.hlsl"
#include "Ray.hlsl"
#include "RayHit.hlsl"
#include "RaymarchingPrimitives.hlsl"
#include "SmoothFunctions.hlsl"
#include "TransformFunctions.hlsl"

static const float PI = 3.14159265f;

float3 SkyBoxColor(inout Ray ray)
{
    ray.Energy = 0.0;
    float phi = atan2(ray.Direction.x, -ray.Direction.z) / -PI * 0.5;
    float theta = acos(ray.Direction.y) / -PI;
    return SkyBoxTexture.SampleLevel(sampler_SkyBoxTexture, float2(phi, theta), 0.0).xyz;
}

float2 Map(inout RayHit hit)
{
    float2 result = float2(1000, 0);

    uint cubeCount, cubeStride;
    Spheres.GetDimensions(cubeCount, cubeStride);
    for (uint i = 0; i < cubeCount; i++)
    {
        Cube cube = Cubes[i];
        float3 move = DeltaSin(cube.Move, cube.MoveSpeed);
        float3 position = Move(hit.Position, move);
        position = Move(position, cube.Position);
        position = Rotation(position, Time * cube.RotationSpeed);
        result = SmoothMin2(result, SdCube(position, cube.Size), cube.Smooth);
    }

    uint sphereCount, sphereStride;
    Spheres.GetDimensions(sphereCount, sphereStride);
    for (uint i = 0; i < sphereCount; i++)
    {
        Sphere sphere = Spheres[i];
        float3 move = DeltaSin(sphere.Move, sphere.MoveSpeed);
        float3 position = Move(hit.Position, move);
        result = SmoothMin2(result, SdSphere(position, sphere.Radius), sphere.Smooth);
    }

    uint plainsCount, plainsStride;
    Plains.GetDimensions(plainsCount, plainsStride);
    for (uint i = 0; i < plainsCount; i++)
    {
        Plane plane = Plains[i];
        result = SmoothMin2(result, SdPlane(hit.Position, plane.Normal, plane.K), plane.Smooth);
    }

    return result;
}

float3 CalcNormal(in RayHit hit)
{
    float2 e = float2(1.0, -1.0) * 0.5773 * 0.005;

    RayHit hit1 = hit;
    RayHit hit2 = hit;
    RayHit hit3 = hit;
    RayHit hit4 = hit;

    hit1.Position += e.xyy;
    hit2.Position += e.yyx;
    hit3.Position += e.yxy;
    hit4.Position += e.xxx;

    return normalize(
        e.xyy * Map(hit1).x +
        e.yyx * Map(hit2).x +
        e.yxy * Map(hit3).x +
        e.xxx * Map(hit4).x);
}

RayHit Trace(Ray ray)
{
    const float MaxDistance = 10.0;
    RayHit hit = InitRayHit();
    hit.Distance = 0.0;

    for (int i = 0; i < 512; i++)
    {
        hit.Position = ray.Position + ray.Direction * hit.Distance;
        float distance = Map(hit);
        if (distance < 0.0 ||
            hit.Distance > MaxDistance)
        {
            break;
        }

        hit.Distance += distance;
    }

    if (hit.Distance > MaxDistance)
    {
        hit.Distance = 1.#INF;
    }
    else
    {
        hit.Normal = CalcNormal(hit);
    }

    return hit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.Distance < 1.#INF)
    {
        float3 specular = 0.6;
        float3 albedo = 0.8;

        ray.Position = hit.Position + hit.Normal * 0.001;
        ray.Direction = reflect(ray.Direction, hit.Normal);
        ray.Energy *= specular;
        //ray.Energy *= hit.Specular;

        Ray shadowRay = InitRay(
            hit.Position + hit.Normal * 0.001,
            -1.0 * DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.Distance < 1.#INF)
        {
            return 0.0;
        }

        //return hit.Normal * 0.5 + 0.5;
        //return 0.0;
        return saturate(dot(hit.Normal, DirectionalLight.xyz) * -1) * DirectionalLight.w * albedo;
        //return saturate(dot(hit.Normal, DirectionalLight.xyz) * -1) * DirectionalLight.w * hit.Albedo;
    }
    else
    {
        return SkyBoxColor(ray);
    }
}

float4 MainRaymarching(uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    Result.GetDimensions(w, h);
    float2 uvr = (id.xy * 2.0 - float2(w, h)) / h;

    Ray ray = InitRay(float3(0.0, 0.0, -3.0), normalize(float3(uvr, 1.0)));
    float3 color = 0.0;

    for (int i = 0; i < ReflectionsCount; i++)
    {
        RayHit hit = Trace(ray);
        color += ray.Energy * Shade(ray, hit);

        if (!any(ray.Energy))
        {
            break;
        }
    }

    return float4(color, 1.0);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = MainRaymarching(id);
}
