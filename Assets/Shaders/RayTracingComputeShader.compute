#pragma kernel CSMain

static const float PI = 3.14159265f;

RWTexture2D<float4> Result;

float4x4 World;
float4x4 Projection;

Texture2D<float4> SkyBoxTexture;
SamplerState sampler_SkyBoxTexture;

struct Ray
{
    float3 Position;
    float3 Direction;
};

Ray InitRay(float3 position, float3 direction)
{
    Ray r;
    r.Position = position;
    r.Direction = direction;
    return r;
}

Ray InitCameraRay(float2 uv)
{
    float3 position = mul(World, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(Projection, float4(uv, 0, 1)).xyz;

    direction = mul(World, float4(direction, 0)).xyz;
    direction = normalize(direction);

    return InitRay(position, direction);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 1.0);

    uint w, h;
    Result.GetDimensions(w, h);
    float2 uv = id.xy / float2(w, h) * 2 - 1;

    Ray r = InitCameraRay(uv);

    float phi = atan2(r.Direction.x, -r.Direction.z) / -PI * 0.5;
    float theta = acos(r.Direction.y) / -PI;

    float4 scyColor = SkyBoxTexture.SampleLevel(sampler_SkyBoxTexture, float2(phi, theta), 0);

    //Result[id.xy] = float4(uv.x, uv.y, 0, 1);
    Result[id.xy] = scyColor;
}
